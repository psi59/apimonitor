// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/realsangil/apimonitor/models"

import rsdb "github.com/realsangil/apimonitor/pkg/rsdb"
import rsmodels "github.com/realsangil/apimonitor/pkg/rsmodels"

// TestRepository is an autogenerated mock type for the TestRepository type
type TestRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, src
func (_m *TestRepository) Create(tx rsdb.Connection, src rsmodels.ValidatedObject) error {
	ret := _m.Called(tx, src)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection, rsmodels.ValidatedObject) error); ok {
		r0 = rf(tx, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTable provides a mock function with given fields: tx
func (_m *TestRepository) CreateTable(tx rsdb.Connection) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: tx, id
func (_m *TestRepository) DeleteById(tx rsdb.Connection, id rsmodels.ValidatedObject) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection, rsmodels.ValidatedObject) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FirstOrCreate provides a mock function with given fields: tx, src
func (_m *TestRepository) FirstOrCreate(tx rsdb.Connection, src rsmodels.ValidatedObject) error {
	ret := _m.Called(tx, src)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection, rsmodels.ValidatedObject) error); ok {
		r0 = rf(tx, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: tx, id
func (_m *TestRepository) GetById(tx rsdb.Connection, id rsmodels.ValidatedObject) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection, rsmodels.ValidatedObject) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByIdAndWebServiceId provides a mock function with given fields: conn, endpoint
func (_m *TestRepository) GetByIdAndWebServiceId(conn rsdb.Connection, endpoint *models.Test) error {
	ret := _m.Called(conn, endpoint)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection, *models.Test) error); ok {
		r0 = rf(conn, endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetList provides a mock function with given fields: conn, items, filter, orders
func (_m *TestRepository) GetList(conn rsdb.Connection, items *[]*models.TestListItem, filter rsdb.ListFilter, orders rsdb.Orders) (int, error) {
	ret := _m.Called(conn, items, filter, orders)

	var r0 int
	if rf, ok := ret.Get(0).(func(rsdb.Connection, *[]*models.TestListItem, rsdb.ListFilter, rsdb.Orders) int); ok {
		r0 = rf(conn, items, filter, orders)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rsdb.Connection, *[]*models.TestListItem, rsdb.ListFilter, rsdb.Orders) error); ok {
		r1 = rf(conn, items, filter, orders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: tx, items, filter, orders
func (_m *TestRepository) List(tx rsdb.Connection, items interface{}, filter rsdb.ListFilter, orders rsdb.Orders) (int, error) {
	ret := _m.Called(tx, items, filter, orders)

	var r0 int
	if rf, ok := ret.Get(0).(func(rsdb.Connection, interface{}, rsdb.ListFilter, rsdb.Orders) int); ok {
		r0 = rf(tx, items, filter, orders)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rsdb.Connection, interface{}, rsdb.ListFilter, rsdb.Orders) error); ok {
		r1 = rf(tx, items, filter, orders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: tx, src, data
func (_m *TestRepository) Patch(tx rsdb.Connection, src rsmodels.ValidatedObject, data rsmodels.ValidatedObject) error {
	ret := _m.Called(tx, src, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection, rsmodels.ValidatedObject, rsmodels.ValidatedObject) error); ok {
		r0 = rf(tx, src, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: tx, src
func (_m *TestRepository) Save(tx rsdb.Connection, src rsmodels.ValidatedObject) error {
	ret := _m.Called(tx, src)

	var r0 error
	if rf, ok := ret.Get(0).(func(rsdb.Connection, rsmodels.ValidatedObject) error); ok {
		r0 = rf(tx, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
