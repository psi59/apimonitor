// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import amerr "github.com/realsangil/apimonitor/pkg/amerr"
import mock "github.com/stretchr/testify/mock"
import models "github.com/realsangil/apimonitor/models"
import rsdb "github.com/realsangil/apimonitor/pkg/rsdb"

// WebServiceService is an autogenerated mock type for the WebServiceService type
type WebServiceService struct {
	mock.Mock
}

// CreateWebService provides a mock function with given fields: transaction, request
func (_m *WebServiceService) CreateWebService(transaction rsdb.Transaction, request models.WebServiceRequest) (*models.WebService, *amerr.ErrorWithLanguage) {
	ret := _m.Called(transaction, request)

	var r0 *models.WebService
	if rf, ok := ret.Get(0).(func(rsdb.Transaction, models.WebServiceRequest) *models.WebService); ok {
		r0 = rf(transaction, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebService)
		}
	}

	var r1 *amerr.ErrorWithLanguage
	if rf, ok := ret.Get(1).(func(rsdb.Transaction, models.WebServiceRequest) *amerr.ErrorWithLanguage); ok {
		r1 = rf(transaction, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*amerr.ErrorWithLanguage)
		}
	}

	return r0, r1
}

// GetWebServiceById provides a mock function with given fields: transaction, webService
func (_m *WebServiceService) GetWebServiceById(transaction rsdb.Transaction, webService *models.WebService) *amerr.ErrorWithLanguage {
	ret := _m.Called(transaction, webService)

	var r0 *amerr.ErrorWithLanguage
	if rf, ok := ret.Get(0).(func(rsdb.Transaction, *models.WebService) *amerr.ErrorWithLanguage); ok {
		r0 = rf(transaction, webService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amerr.ErrorWithLanguage)
		}
	}

	return r0
}
